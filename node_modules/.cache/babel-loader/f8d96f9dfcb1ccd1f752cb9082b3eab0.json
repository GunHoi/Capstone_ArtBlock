{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    return {\n      items: [{\n        src: 'https://cdn.vuetifyjs.com/images/carousel/squirrel.jpg'\n      }, {\n        src: 'https://cdn.vuetifyjs.com/images/carousel/sky.jpg'\n      }, {\n        src: 'https://cdn.vuetifyjs.com/images/carousel/bird.jpg'\n      }, {\n        src: 'https://cdn.vuetifyjs.com/images/carousel/planet.jpg'\n      }]\n    };\n  },\n  methods: {\n    methods: {\n      /**\n       * scrollTo - Horizontal Scrolling\n       * @param {(HTMLElement ref)} element - Scroll Container\n       * @param {number} scrollPixels - pixel to scroll\n       * @param {number} duration -  Duration of scrolling animation in millisec\n       */\n      scrollTo: function scrollTo(element, scrollPixels, duration) {\n        var scrollPos = element.scrollLeft; // Condition to check if scrolling is required\n\n        if (!((scrollPos === 0 || scrollPixels > 0) && (element.clientWidth + scrollPos === element.scrollWidth || scrollPixels < 0))) {\n          // Get the start timestamp\n          var startTime = \"now\" in window.performance ? performance.now() : new Date().getTime();\n\n          function scroll(timestamp) {\n            //Calculate the timeelapsed\n            var timeElapsed = timestamp - startTime; //Calculate progress \n\n            var progress = Math.min(timeElapsed / duration, 1); //Set the scrolleft\n\n            element.scrollLeft = scrollPos + scrollPixels * progress; //Check if elapsed time is less then duration then call the requestAnimation, otherwise exit\n\n            if (timeElapsed < duration) {\n              //Request for animation\n              window.requestAnimationFrame(scroll);\n            } else {\n              return;\n            }\n          } //Call requestAnimationFrame on scroll function first time\n\n\n          window.requestAnimationFrame(scroll);\n        }\n      },\n      swipeLeft: function swipeLeft() {\n        var content = this.$refs.content;\n        this.scrollTo(content, -300, 800);\n      },\n      swipeRight: function swipeRight() {\n        var content = this.$refs.content;\n        this.scrollTo(content, 300, 800);\n      }\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA;AACAA,MADA,kBACA;AACA;AACAC,cACA;AACAC;AADA,OADA,EAIA;AACAA;AADA,OAJA,EAOA;AACAA;AADA,OAPA,EAUA;AACAA;AADA,OAVA;AADA;AAgBA,GAlBA;AAmBAC;AACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,cAPA,oBAOAC,OAPA,EAOAC,YAPA,EAOAC,QAPA,EAOA;AACA,2CADA,CAEA;;AACA,uIACA;AACA;AACA,0BACA,8BACAC,iBADA,GAEA,oBAHA;;AAKA;AACA;AACA,oDAFA,CAGA;;AACA,+DAJA,CAKA;;AACAH,qEANA,CAOA;;AACA;AACA;AACAI;AACA,aAHA,MAGA;AACA;AACA;AACA,WArBA,CAsBA;;;AACAA;AACA;AACA,OApCA;AAqCAC,eArCA,uBAqCA;AACA;AACA;AACA,OAxCA;AAyCAC,gBAzCA,wBAyCA;AACA;AACA;AACA;AA5CA;AADA;AAnBA","names":["data","items","src","methods","scrollTo","element","scrollPixels","duration","performance","window","swipeLeft","swipeRight"],"sourceRoot":"src/views","sources":["Home.vue"],"sourcesContent":["<template>\r\n   <v-app>\r\n      <v-row>\r\n         asdasd\r\n         <v-col cols=\"11\">\r\n            123\r\n            <v-carousel\r\n               hide-delimiters\r\n               height = '900'\r\n               cycle :interval='interval'\r\n               hide-delimiter-background\r\n               show-arrows-on-hover\r\n            >\r\n               <v-carousel-item\r\n                  v-for=\"(item,i) in items\"\r\n                  :key=\"i\"\r\n                  :src=\"item.src\"\r\n               ></v-carousel-item>\r\n            </v-carousel>\r\n         </v-col>\r\n            <v-col>\r\n               <a href=\"#\" v-scroll-to=\"{\r\n                  el: '#element',\r\n                  container: 'body',\r\n                  duration: 500,\r\n                  easing: 'linear',\r\n                  offset: -200,\r\n                  force: true,\r\n                  cancelable: true,\r\n                  onStart: onStart,\r\n                  onDone: onDone,\r\n                  onCancel: onCancel,\r\n                  x: false,\r\n                  y: true\r\n               }\">\r\n                  Scroll to #element\r\n               </a>\r\n               <v-btn @click=\"swipeLeft\"></v-btn>\r\n               <h1 id=\"element\">Hi. I'm element</h1>\r\n         </v-col>\r\n         <v-body>hi</v-body>\r\n\r\n      </v-row>\r\n      <v-container id=\"hello\">\r\n         <h2>hello</h2>\r\n      </v-container>\r\n   </v-app>\r\n</template>\r\n<script>\r\n  export default {\r\n    data () {\r\n      return {\r\n        items: [\r\n          {\r\n            src: 'https://cdn.vuetifyjs.com/images/carousel/squirrel.jpg',\r\n          },\r\n          {\r\n            src: 'https://cdn.vuetifyjs.com/images/carousel/sky.jpg',\r\n          },\r\n          {\r\n            src: 'https://cdn.vuetifyjs.com/images/carousel/bird.jpg',\r\n          },\r\n          {\r\n            src: 'https://cdn.vuetifyjs.com/images/carousel/planet.jpg',\r\n          },\r\n        ],\r\n      }\r\n    },\r\n    methods:{\r\n      methods: {\r\n/**\r\n * scrollTo - Horizontal Scrolling\r\n * @param {(HTMLElement ref)} element - Scroll Container\r\n * @param {number} scrollPixels - pixel to scroll\r\n * @param {number} duration -  Duration of scrolling animation in millisec\r\n */\r\n    scrollTo(element, scrollPixels, duration) {\r\n      const scrollPos = element.scrollLeft;\r\n      // Condition to check if scrolling is required\r\n      if ( !( (scrollPos === 0 || scrollPixels > 0) && (element.clientWidth + scrollPos === element.scrollWidth || scrollPixels < 0))) \r\n      {\r\n        // Get the start timestamp\r\n        const startTime =\r\n          \"now\" in window.performance\r\n            ? performance.now()\r\n            : new Date().getTime();\r\n        \r\n        function scroll(timestamp) {\r\n          //Calculate the timeelapsed\r\n          const timeElapsed = timestamp - startTime;\r\n          //Calculate progress \r\n          const progress = Math.min(timeElapsed / duration, 1);\r\n          //Set the scrolleft\r\n          element.scrollLeft = scrollPos + scrollPixels * progress;\r\n          //Check if elapsed time is less then duration then call the requestAnimation, otherwise exit\r\n          if (timeElapsed < duration) {\r\n            //Request for animation\r\n            window.requestAnimationFrame(scroll);\r\n          } else {\r\n            return;\r\n          }\r\n        }\r\n        //Call requestAnimationFrame on scroll function first time\r\n        window.requestAnimationFrame(scroll);\r\n      }\r\n    },\r\n    swipeLeft() {\r\n      const content = this.$refs.content;\r\n      this.scrollTo(content, -300, 800);\r\n    },\r\n    swipeRight() {\r\n      const content = this.$refs.content;\r\n      this.scrollTo(content, 300, 800);\r\n    }\r\n  }\r\n    }\r\n  }\r\n</script>\r\n<style scoped>\r\n  #element{\r\n    margin-top : 1000px;\r\n  }\r\n  #CARD{\r\n    padding : 50px;\r\n  }\r\n  #IMG{\r\n    height: flex;\r\n    text-align: center;\r\n  }\r\n</style>"]},"metadata":{},"sourceType":"module"}